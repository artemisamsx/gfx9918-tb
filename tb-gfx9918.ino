// Artemisa Computer System
// GFX9918 Testbench
// Copyright (C) 2018-2019 Alvaro Polo
//
// This is an Arduino sketch aimed to provide a testbench for the GFX9918
// board. It basically makes the Arduino simulate an Artemisa Computer
// motherboard, interacting with the TMS9918 chip to show a message in the
// screen. It configures the screen mode 0, with a MSX color scheme and shows
// the welcome message of a MSX system in the screen.
//

// The VDP ports selected via A0
#define PORT_CONTROL  HIGH
#define PORT_DATA     LOW

// A macro that generates the control byte necessary to write into a VDP
// register.
#define CTRL_BYTE_WRITE_REG(reg) (0x80 | (reg & 0x07))

// Some useful macros to calculate base address of some tables in the VRAM.
#define BASE_ADDR_NAME_TABLE(addr) (byte(addr >> 10))
#define BASE_ADDR_COLOR_TABLE(addr) (byte(addr >> 6))
#define BASE_ADDR_PATTERNGEN_TABLE(addr) (byte(addr >> 11))
#define BASE_ADDR_SPRITEATTR_TABLE(addr) (byte(addr >> 7))
#define BASE_ADDR_SPRITEPATTERNGEN_TABLE(addr) (byte(addr >> 11))

// Use those mapping for MSX screen 0 (text)
#define VRAM_NAME_TABLE             0x0000
#define VRAM_COLOR_TABLE            0x1000
#define VRAM_PATTERNGEN_TABLE       0x0800
#define VRAM_SPRITEATTR_TABLE       0x1000
#define VRAM_SPRITEPATTERNGEN_TABLE 0x1000

// Some colors of the 9918 palette
#define COLOR_BLACK     0x01
#define COLOR_GREEN     0x02
#define COLOR_DARKBLUE  0x04
#define COLOR_LIGHTBLUE 0x05
#define COLOR_RED       0x08
#define COLOR_MAGENTA   0x0d
#define COLOR_WHITE     0x0f

// The colors to be configured
#define COLOR_FOREGROUND COLOR_WHITE
#define COLOR_BACKGROUND COLOR_LIGHTBLUE

#if defined(ARDUINO_AVR_UNO)
  // Pinout for Arduino Uno
  const int pin_data[] PROGMEM    = { A0, A1, A2, A3, A4, A5, 12, 13 };
  const int pin_vdpsel PROGMEM    = 2;
  const int pin_wr PROGMEM        = 3;
  const int pin_rd PROGMEM        = 4;
  const int pin_irq PROGMEM       = 5;
  const int pin_reset PROGMEM     = 6;
  const int pin_a0 PROGMEM        = 7;
#elif defined(ARDUINO_AVR_MEGA) || defined(ARDUINO_AVR_MEGA2560)
  // Pinout for Arduino Mega 2560
  const int pin_data[] PROGMEM    = { 22, 23, 24, 25, 26, 27, 28, 29 };
  const int pin_vdpsel PROGMEM    = 2;
  const int pin_wr PROGMEM        = 3;
  const int pin_rd PROGMEM        = 4;
  const int pin_irq PROGMEM       = 5;
  const int pin_reset PROGMEM     = 6;
  const int pin_a0 PROGMEM        = 7;
#else
  #error Unsupported board selection.
#endif

// The charset to be used to write strings into screen. 
// Quite large, full declaration at the bottom of this source file.
extern const byte charset[256*8] PROGMEM;

void setup() {
  delay(2000); // Let the power flow
  Serial.begin(9600);
  setup_control();
  setup_data(INPUT);
  reset();
  init_device();
}

// Setup the control lines
void setup_control() {
  pinMode(pin_irq, INPUT);

  digitalWrite(pin_vdpsel, HIGH);
  digitalWrite(pin_wr, HIGH);
  digitalWrite(pin_rd, HIGH);
  digitalWrite(pin_reset, HIGH);
  digitalWrite(pin_a0, LOW);

  pinMode(pin_vdpsel, OUTPUT);
  pinMode(pin_wr, OUTPUT);
  pinMode(pin_rd, OUTPUT);
  pinMode(pin_reset, OUTPUT);
  pinMode(pin_a0, OUTPUT);
}

// Set the data bus. `mode` indicates the direction of the bus (INPUT or
// OUTPUT).
void setup_data(int mode) {
  for (int i = 0; i < 8; i++) {
    pinMode(pin_data[i], mode);
  }
}

// Send a reset pulse to the VDP
void reset() {
  digitalWrite(pin_reset, LOW);
  delayMicroseconds(200);
  digitalWrite(pin_reset, HIGH);
}

// Initialize the VDP
void init_device() {
  // General control flags
  write_register(0, 0b00000000);
  write_register(1, 0b11010000); // note: no interrupts

  // Color attributes for screen 0
  write_register(7, (COLOR_FOREGROUND << 4) | COLOR_BACKGROUND);

  // Name table base address
  write_register(2, BASE_ADDR_NAME_TABLE(VRAM_NAME_TABLE));

  // Color table
  write_register(3, BASE_ADDR_COLOR_TABLE(VRAM_COLOR_TABLE));

  // Pattern generator table
  write_register(4, BASE_ADDR_PATTERNGEN_TABLE(VRAM_PATTERNGEN_TABLE));

  // Sprite attribute table
  write_register(5, BASE_ADDR_SPRITEATTR_TABLE(VRAM_SPRITEATTR_TABLE));

  // Sprite pattern generator table
  write_register(6, BASE_ADDR_SPRITEPATTERNGEN_TABLE(VRAM_SPRITEPATTERNGEN_TABLE));

  // Write the charset to the pattern table
  write_vram(VRAM_PATTERNGEN_TABLE, charset, 256*8);

  fill_vram(VRAM_NAME_TABLE, 0, 40*24);

  // Write a welcome message
  write_vram(VRAM_NAME_TABLE, F("MSX BASIC version 1.0"));
  write_vram(VRAM_NAME_TABLE + 40, F("Copyright 1983 by Microsoft"));
  write_vram(VRAM_NAME_TABLE + 40*2, F("28815 Bytes free"));
  write_vram(VRAM_NAME_TABLE + 40*3, F("Ok"));
  write_vram(VRAM_NAME_TABLE + 40*23, F("color   auto    goto    list    run"));
}

// Write given `data` into given `reg`ister.
void write_register(int reg, byte data) {
  setup_data(OUTPUT);
  write_data(data, PORT_CONTROL);
  write_data(CTRL_BYTE_WRITE_REG(reg), PORT_CONTROL);
  setup_data(INPUT);
}

// Read status register
byte read_register() {
  return read_data(PORT_CONTROL);
}

// Write `nbytes` of `data` to VRAM at given `address`
void write_vram(word address, const byte *data, word nbytes) {
  write_data(byte(address), PORT_CONTROL);
  write_data(byte(address >> 8) | 0x40, PORT_CONTROL);
  for (word i = 0; i < nbytes; i++) {
    write_data(data[i], PORT_DATA);
  }
}

// Write a string to VRAM at given `address`
void write_vram(word address, const String &data) {
  write_vram(address, (const byte*) data.c_str(), data.length());
}

// Fill VRAM at `address` with `nbytes` repetitions of `data`
void fill_vram(word address, byte data, word nbytes) {
  write_data(byte(address), PORT_CONTROL);
  write_data(byte(address >> 8) | 0x40, PORT_CONTROL);
  for (word i = 0; i < nbytes; i++) {
    write_data(data, PORT_DATA);
  }
}

// Read `nbytes` of data from VRAM at `address` and store it in `data` buffer
void read_vram(word address, byte *data, word nbytes) {
  write_data(byte(address), PORT_CONTROL);
  write_data(byte(address >> 8), PORT_CONTROL);
  for (word i = 0; i < nbytes; i++) {
    data[i] = read_data(PORT_DATA);
  }
}

// Perform a VRAM check. It writes some bytes in VRAM and read them back to
// check the whole cycle is successful.
void check_vram(word address, byte *expected, word nbytes) {
  byte buff[nbytes];
  read_vram(address, buff, nbytes);
  for (word i = 0; i < nbytes; i++) {
    if (expected[i] != buff[i]) {
      Serial.print(F("Invalid byte at address h"));
      Serial.print(address + i, HEX);
      Serial.print(F("; expected h"));
      Serial.print(expected[i], HEX);
      Serial.print(F(" but h"));
      Serial.print(buff[i], HEX);
      Serial.println(F(" given"));
    }
  }
}

// Low level data writing operation. Write given `data` byte in given `port`
void write_data(byte data, int port) {
  setup_data(OUTPUT);
  for (int i = 0; i < 8; i++) {
    digitalWrite(pin_data[i], data & 0x01);
    data >>= 1;
  }
  digitalWrite(pin_a0, port);
  digitalWrite(pin_wr, LOW);
  digitalWrite(pin_vdpsel, LOW);
  delayMicroseconds(20);
  digitalWrite(pin_vdpsel, HIGH);
  digitalWrite(pin_wr, HIGH);
  setup_data(INPUT);
}

// Low level data reading operation. Read a byte from given `port`.
byte read_data(int port) {
  byte data = 0;
  digitalWrite(pin_a0, port);
  digitalWrite(pin_rd, LOW);
  digitalWrite(pin_vdpsel, LOW);
  for (int i = 0; i < 8; i++) {
    data <<= 1;
    data |= digitalRead(pin_data[i]);
  }
  digitalWrite(pin_vdpsel, HIGH);
  digitalWrite(pin_rd, HIGH);
  return data;
}

void loop() {
}

const byte charset[256*8] PROGMEM = {
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,    // 0
    0x3C,0x42,0xA5,0xA5,0xC3,0xBD,0x42,0x3C,    // 1
    0x3C,0x7E,0xDB,0xDB,0xBD,0xC3,0x7E,0x3C,    // 2
    0x6C,0xAA,0x92,0x44,0x44,0x28,0x10,0x00,    // 3
    0x10,0x28,0x44,0x82,0x44,0x28,0x10,0x00,    // 4
    0x10,0x38,0x38,0xD6,0xFE,0xD6,0x38,0x00,    // 5
    0x10,0x38,0x7C,0x7C,0xFE,0xD6,0x38,0x00,    // 6
    0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,    // 7
    0xFF,0xFF,0xFF,0xE7,0xE7,0xFF,0xFF,0xFF,    // 8
    0x3C,0x42,0x81,0x81,0x81,0x81,0x42,0x3C,    // 9
    0xC3,0xBD,0x7E,0x7E,0x7E,0x7E,0xBD,0xC3,    // 10
    0x0C,0x04,0x08,0x70,0x88,0x88,0x70,0x00,    // 11
    0x00,0x70,0x88,0x88,0x70,0x20,0x70,0x20,    // 12
    0x20,0x30,0x28,0x28,0x20,0xE0,0xC0,0x00,    // 13
    0x38,0x3C,0x24,0x24,0xE4,0xDC,0x18,0x00,    // 14
    0x10,0x44,0x38,0xAA,0x38,0x44,0x10,0x00,    // 15
    0x10,0x10,0x10,0x38,0x10,0x10,0x10,0x10,    // 16
    0x10,0x10,0x10,0xEF,0x00,0x00,0x00,0x00,    // 17
    0x00,0x00,0x00,0xEF,0x10,0x10,0x10,0x10,    // 18
    0x10,0x10,0x10,0xE0,0x10,0x10,0x10,0x10,    // 19
    0x10,0x10,0x10,0x0F,0x10,0x10,0x10,0x10,    // 20
    0x10,0x10,0x10,0xEF,0x10,0x10,0x10,0x10,    // 21
    0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,    // 22
    0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,    // 23
    0x00,0x00,0x00,0x0F,0x10,0x10,0x10,0x10,    // 24
    0x00,0x00,0x00,0xE0,0x10,0x10,0x10,0x10,    // 25
    0x10,0x10,0x10,0x0F,0x00,0x00,0x00,0x00,    // 26
    0x10,0x10,0x10,0xE0,0x00,0x00,0x00,0x00,    // 27
    0x81,0x42,0x24,0x18,0x18,0x24,0x42,0x81,    // 28
    0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,    // 29
    0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01,    // 30
    0x00,0x00,0x10,0xFF,0x10,0x00,0x00,0x00,    // 31
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,    // 32
    0x20,0x20,0x20,0x20,0x00,0x20,0x00,0x00,    // 33
    0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00,    // 34
    0x00,0x50,0xF8,0x50,0xF8,0x50,0x00,0x00,    // 35
    0x20,0x70,0xA0,0x70,0x28,0x70,0x20,0x00,    // 36
    0x00,0xC8,0xD0,0x20,0x58,0x98,0x00,0x00,    // 37
    0x60,0x90,0x60,0xA8,0x98,0x60,0x00,0x00,    // 38
    0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,    // 39
    0x20,0x40,0x40,0x40,0x40,0x20,0x00,0x00,    // 40
    0x20,0x10,0x10,0x10,0x10,0x20,0x00,0x00,    // 41
    0x00,0x20,0xA8,0x70,0x50,0x88,0x00,0x00,    // 42
    0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00,    // 43
    0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,    // 44
    0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,    // 45
    0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,    // 46
    0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,    // 47
    0x70,0x88,0xA8,0xA8,0x88,0x70,0x00,0x00,    // 48
    0x20,0x60,0x20,0x20,0x20,0x70,0x00,0x00,    // 49
    0x70,0x88,0x08,0x70,0x80,0xF8,0x00,0x00,    // 50
    0xF8,0x08,0x30,0x08,0x88,0x70,0x00,0x00,    // 51
    0x10,0x30,0x50,0xF8,0x10,0x10,0x00,0x00,    // 52
    0xF8,0x80,0x70,0x08,0x88,0x70,0x00,0x00,    // 53
    0x30,0x40,0x70,0x88,0x88,0x70,0x00,0x00,    // 54
    0xF8,0x88,0x10,0x20,0x20,0x20,0x00,0x00,    // 55
    0x70,0x88,0x70,0x88,0x88,0x70,0x00,0x00,    // 56
    0x70,0x88,0x88,0x78,0x08,0x70,0x00,0x00,    // 57
    0x00,0x00,0x40,0x00,0x00,0x40,0x00,0x00,    // 58
    0x00,0x00,0x40,0x00,0x00,0x40,0x40,0x00,    // 59
    0x00,0x18,0x60,0x80,0x60,0x18,0x00,0x00,    // 60
    0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00,    // 61
    0x00,0xC0,0x30,0x08,0x30,0xC0,0x00,0x00,    // 62
    0x70,0x88,0x30,0x20,0x00,0x20,0x00,0x00,    // 63
    0x70,0x88,0x98,0xA8,0xA8,0x98,0x40,0x00,    // 64
    0x70,0x88,0x88,0xF8,0x88,0x88,0x00,0x00,    // 65
    0xE0,0x90,0xE0,0x90,0x88,0xF0,0x00,0x00,    // 66
    0x70,0x88,0x80,0x80,0x88,0x70,0x00,0x00,    // 67
    0xF0,0x48,0x48,0x48,0x48,0xF0,0x00,0x00,    // 68
    0xF8,0x80,0xE0,0x80,0x80,0xF8,0x00,0x00,    // 69
    0xF8,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,    // 70
    0x70,0x88,0x80,0xB8,0x88,0x70,0x00,0x00,    // 71
    0x88,0x88,0xF8,0x88,0x88,0x88,0x00,0x00,    // 72
    0x70,0x20,0x20,0x20,0x20,0x70,0x00,0x00,    // 73
    0x38,0x08,0x08,0x08,0x88,0x70,0x00,0x00,    // 74
    0x88,0x90,0xA0,0xE0,0x90,0x88,0x00,0x00,    // 75
    0x80,0x80,0x80,0x80,0x80,0xF8,0x00,0x00,    // 76
    0xD8,0xA8,0xA8,0x88,0x88,0x88,0x00,0x00,    // 77
    0xC8,0xA8,0xA8,0x98,0x98,0x88,0x00,0x00,    // 78
    0x70,0x88,0x88,0x88,0x88,0x70,0x00,0x00,    // 79
    0xF0,0x88,0x88,0xF0,0x80,0x80,0x00,0x00,    // 80
    0x70,0x88,0x88,0xA8,0x90,0x68,0x00,0x00,    // 81
    0xF0,0x88,0x88,0xF0,0xA0,0x98,0x00,0x00,    // 82
    0x70,0x80,0x70,0x08,0x08,0xF0,0x00,0x00,    // 83
    0xF8,0x20,0x20,0x20,0x20,0x20,0x00,0x00,    // 84
    0x88,0x88,0x88,0x88,0x88,0x78,0x00,0x00,    // 85
    0x88,0x88,0x88,0x50,0x50,0x20,0x00,0x00,    // 86
    0x88,0x88,0xA8,0xA8,0xA8,0xD8,0x00,0x00,    // 87
    0x88,0x50,0x20,0x50,0x88,0x88,0x00,0x00,    // 88
    0x88,0x88,0x70,0x20,0x20,0x20,0x00,0x00,    // 89
    0xF8,0x10,0x20,0x40,0x80,0xF8,0x00,0x00,    // 90
    0x70,0x40,0x40,0x40,0x40,0x70,0x00,0x00,    // 91
    0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,    // 92
    0x70,0x10,0x10,0x10,0x10,0x70,0x00,0x00,    // 93
    0x40,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,    // 94
    0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,    // 95
    0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x00,    // 96
    0x00,0x00,0x78,0x88,0x98,0x68,0x00,0x00,    // 97
    0x80,0x80,0xF0,0x88,0x88,0xF0,0x00,0x00,    // 98
    0x00,0x00,0x78,0x80,0x80,0x78,0x00,0x00,    // 99
    0x08,0x08,0x78,0x88,0x88,0x78,0x00,0x00,    // 100
    0x00,0x00,0x70,0x98,0xE0,0x78,0x00,0x00,    // 101
    0x30,0x48,0x40,0x40,0xE0,0x40,0x40,0x40,    // 102
    0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70,    // 103
    0x80,0x80,0xF0,0x88,0x88,0x88,0x00,0x00,    // 104
    0x20,0x00,0x60,0x20,0x20,0x70,0x00,0x00,    // 105
    0x10,0x00,0x30,0x10,0x10,0x10,0x10,0x60,    // 106
    0x80,0x80,0x98,0xA0,0xE0,0x98,0x00,0x00,    // 107
    0xC0,0x40,0x40,0x40,0x40,0x70,0x00,0x00,    // 108
    0x00,0x00,0xF0,0xA8,0xA8,0xA8,0x00,0x00,    // 109
    0x00,0x00,0xF0,0x88,0x88,0x88,0x00,0x00,    // 110
    0x00,0x00,0x70,0x88,0x88,0x70,0x00,0x00,    // 111
    0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80,    // 112
    0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x08,    // 113
    0x00,0x00,0xB8,0xC0,0x80,0x80,0x00,0x00,    // 114
    0x00,0x00,0x78,0xF0,0x08,0xF0,0x00,0x00,    // 115
    0x40,0x40,0xF0,0x40,0x48,0x30,0x00,0x00,    // 116
    0x00,0x00,0x88,0x88,0x88,0x78,0x00,0x00,    // 117
    0x00,0x00,0x88,0x88,0x50,0x20,0x00,0x00,    // 118
    0x00,0x00,0x88,0xA8,0xA8,0xD8,0x00,0x00,    // 119
    0x00,0x00,0xC8,0x30,0x60,0x98,0x00,0x00,    // 120
    0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70,    // 121
    0x00,0x00,0xF8,0x30,0x40,0xF8,0x00,0x00,    // 122
    0x10,0x20,0x20,0x40,0x20,0x20,0x10,0x00,    // 123
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,    // 124
    0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00,    // 125
    0x50,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,    // 126
    0x00,0x20,0x50,0x50,0xF8,0x00,0x00,0x00,    // 127
    0x70,0x88,0x80,0x80,0x88,0x70,0x20,0x40,    // 128
    0x50,0x00,0x88,0x88,0x88,0x78,0x00,0x00,    // 129
    0x08,0x10,0x70,0x98,0xE0,0x78,0x00,0x00,    // 130
    0x20,0x50,0x78,0x88,0x98,0x68,0x00,0x00,    // 131
    0x50,0x00,0x78,0x88,0x98,0x68,0x00,0x00,    // 132
    0x40,0x20,0x78,0x88,0x98,0x68,0x00,0x00,    // 133
    0x20,0x00,0x78,0x88,0x98,0x68,0x00,0x00,    // 134
    0x00,0x00,0x78,0x80,0x80,0x78,0x20,0x40,    // 135
    0x20,0x50,0x70,0x98,0xE0,0x78,0x00,0x00,    // 136
    0x50,0x00,0x70,0x98,0xE0,0x78,0x00,0x00,    // 137
    0x40,0x20,0x70,0x98,0xE0,0x78,0x00,0x00,    // 138
    0x50,0x00,0x60,0x20,0x20,0x70,0x00,0x00,    // 139
    0x20,0x50,0x60,0x20,0x20,0x70,0x00,0x00,    // 140
    0x40,0x20,0x60,0x20,0x20,0x70,0x00,0x00,    // 141
    0x50,0x70,0x88,0x88,0xF8,0x88,0x00,0x00,    // 142
    0x20,0x70,0x88,0x88,0xF8,0x88,0x00,0x00,    // 143
    0x18,0xF8,0x80,0xE0,0x80,0xF8,0x00,0x00,    // 144
    0x00,0x00,0xD0,0x68,0xB0,0xD8,0x00,0x00,    // 145
    0x78,0xA0,0xB0,0xE0,0xA0,0xB8,0x00,0x00,    // 146
    0x20,0x50,0x70,0x88,0x88,0x70,0x00,0x00,    // 147
    0x50,0x00,0x70,0x88,0x88,0x70,0x00,0x00,    // 148
    0x40,0x20,0x70,0x88,0x88,0x70,0x00,0x00,    // 149
    0x20,0x50,0x88,0x88,0x88,0x78,0x00,0x00,    // 150
    0x40,0x20,0x88,0x88,0x88,0x78,0x00,0x00,    // 151
    0x50,0x00,0x88,0x88,0x88,0x78,0x08,0x70,    // 152
    0x50,0x70,0x88,0x88,0x88,0x70,0x00,0x00,    // 153
    0x50,0x88,0x88,0x88,0x88,0x70,0x00,0x00,    // 154
    0x20,0x20,0x78,0x80,0x80,0x78,0x20,0x20,    // 155
    0x20,0x50,0x40,0xE0,0x40,0x48,0xB0,0x00,    // 156
    0x88,0x88,0x50,0xF8,0x20,0x70,0x20,0x00,    // 157
    0x80,0xD0,0xB0,0xB0,0xB8,0xD0,0x88,0x80,    // 158
    0x38,0x40,0xF0,0x40,0xF0,0x40,0x38,0x00,    // 159
    0x08,0x10,0x78,0x88,0x98,0x68,0x00,0x00,    // 160
    0x10,0x20,0x60,0x20,0x20,0x70,0x00,0x00,    // 161
    0x10,0x20,0x70,0x88,0x88,0x70,0x00,0x00,    // 162
    0x10,0x20,0x88,0x88,0x88,0x78,0x00,0x00,    // 163
    0x28,0x50,0xF0,0x88,0x88,0x88,0x00,0x00,    // 164
    0x28,0xD0,0xA8,0xA8,0x98,0x88,0x00,0x00,    // 165
    0x00,0x00,0x78,0x88,0x98,0x68,0x00,0x70,    // 166
    0x00,0x00,0x70,0x88,0x88,0x70,0x00,0x70,    // 167
    0x20,0x00,0x20,0x60,0x88,0x70,0x00,0x00,    // 168
    0x00,0x00,0x00,0xE0,0x80,0x00,0x00,0x00,    // 169
    0x00,0x00,0x00,0xE0,0x20,0x00,0x00,0x00,    // 170
    0x40,0x48,0x50,0x30,0x48,0x90,0x38,0x00,    // 171
    0x40,0x48,0x50,0x28,0x58,0xB8,0x08,0x00,    // 172
    0x20,0x00,0x20,0x20,0x20,0x20,0x00,0x00,    // 173
    0x00,0x00,0x00,0x48,0x90,0x48,0x00,0x00,    // 174
    0x00,0x00,0x00,0x90,0x48,0x90,0x00,0x00,    // 175
    0x28,0x50,0x70,0x88,0xF8,0x88,0x00,0x00,    // 176
    0x28,0x50,0x78,0x88,0x98,0x68,0x00,0x00,    // 177
    0x28,0x50,0x70,0x20,0x20,0x70,0x00,0x00,    // 178
    0x28,0x50,0x60,0x20,0x20,0x70,0x00,0x00,    // 179
    0x28,0x70,0x88,0x88,0x88,0x70,0x00,0x00,    // 180
    0x28,0x50,0x70,0x88,0x88,0x70,0x00,0x00,    // 181
    0x28,0x50,0x88,0x88,0x88,0x78,0x00,0x00,    // 182
    0x28,0x50,0x00,0x88,0x88,0x78,0x00,0x00,    // 183
    0xFC,0x48,0x48,0x48,0x48,0xE8,0x08,0x30,    // 184
    0x48,0x00,0xD8,0x48,0x48,0xE8,0x08,0x30,    // 185
    0xE0,0x68,0x30,0xE8,0x58,0xB8,0x08,0x00,    // 186
    0x50,0x28,0x00,0x00,0x00,0x00,0x00,0x00,    // 187
    0x00,0x20,0x50,0x88,0x50,0x20,0x00,0x00,    // 188
    0x00,0x48,0x50,0x20,0x68,0xA8,0x00,0x00,    // 189
    0x7C,0xA8,0xA8,0xA8,0x68,0x28,0x28,0x44,    // 190
    0x70,0x80,0x70,0x88,0x70,0x08,0x88,0x70,    // 191
    0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,    // 192
    0xF0,0xF0,0xF0,0xF0,0x0F,0x0F,0x0F,0x0F,    // 193
    0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,    // 194
    0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,    // 195
    0x00,0x00,0x00,0x3C,0x3C,0x00,0x00,0x00,    // 196
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,    // 197
    0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,    // 198
    0x0F,0x0F,0x0F,0x0F,0xF0,0xF0,0xF0,0xF0,    // 199
    0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,    // 200
    0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,    // 201
    0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,    // 202
    0x11,0x22,0x44,0x88,0x11,0x22,0x44,0x88,    // 203
    0x88,0x44,0x22,0x11,0x88,0x44,0x22,0x11,    // 204
    0xFE,0x7C,0x38,0x10,0x00,0x00,0x00,0x00,    // 205
    0x00,0x00,0x00,0x00,0x10,0x38,0x7C,0xFE,    // 206
    0x80,0xC0,0xE0,0xF0,0xE0,0xC0,0x80,0x00,    // 207
    0x01,0x03,0x07,0x0F,0x07,0x03,0x01,0x00,    // 208
    0xFF,0x7E,0x3C,0x18,0x18,0x3C,0x7E,0xFF,    // 209
    0x81,0xC3,0xE7,0xFF,0xFF,0xE7,0xC3,0x81,    // 210
    0xF0,0xF0,0xF0,0xF0,0x00,0x00,0x00,0x00,    // 211
    0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F,    // 212
    0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x00,0x00,    // 213
    0x00,0x00,0x00,0x00,0xF0,0xF0,0xF0,0xF0,    // 214
    0x33,0x33,0xCC,0xCC,0x33,0x33,0xCC,0xCC,    // 215
    0x00,0x10,0x28,0x28,0x7C,0x00,0x00,0x00,    // 216
    0x10,0x10,0x38,0x10,0x38,0x10,0x10,0x00,    // 217
    0x00,0x00,0x50,0x88,0xA8,0x50,0x00,0x00,    // 218
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,    // 219
    0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,    // 220
    0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,    // 221
    0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,    // 222
    0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,    // 223
    0x00,0x00,0x68,0x90,0x90,0x68,0x00,0x00,    // 224
    0x60,0x90,0xE0,0x90,0x90,0xE0,0x80,0x00,    // 225
    0xF8,0x88,0x80,0x80,0x80,0x80,0x00,0x00,    // 226
    0xF8,0x50,0x50,0x50,0x50,0x48,0x80,0x00,    // 227
    0xF8,0x48,0x20,0x40,0x88,0xF8,0x00,0x00,    // 228
    0x00,0x00,0x78,0x90,0x88,0x70,0x00,0x00,    // 229
    0x00,0x00,0x88,0x88,0xC8,0xB0,0x80,0x80,    // 230
    0x00,0x00,0x50,0x50,0x20,0x50,0x50,0x20,    // 231
    0x70,0x20,0x70,0xA8,0xA8,0x70,0x20,0x70,    // 232
    0x70,0x88,0xF8,0x88,0x88,0x70,0x00,0x00,    // 233
    0x70,0x88,0x88,0x88,0x50,0xD8,0x00,0x00,    // 234
    0x30,0x40,0x30,0x48,0x48,0x30,0x00,0x00,    // 235
    0x00,0x00,0x50,0xA8,0xA8,0x50,0x00,0x00,    // 236
    0x00,0x10,0x70,0xA8,0xA8,0x70,0x40,0x00,    // 237
    0x00,0x70,0x80,0xE0,0x80,0x70,0x00,0x00,    // 238
    0x70,0x88,0x88,0x88,0x88,0x88,0x00,0x00,    // 239
    0x00,0xF8,0x00,0xF8,0x00,0xF8,0x00,0x00,    // 240
    0x00,0x20,0x20,0xF8,0x20,0x20,0xF8,0x00,    // 241
    0x00,0xC0,0x30,0x08,0x30,0xC0,0xF8,0x00,    // 242
    0x00,0x18,0x60,0x80,0x60,0x18,0xF8,0x00,    // 243
    0x00,0x18,0x20,0x20,0x20,0x20,0x20,0x20,    // 244
    0x20,0x20,0x20,0x20,0x20,0x20,0xC0,0x00,    // 245
    0x00,0x20,0x00,0xF8,0x00,0x20,0x00,0x00,    // 246
    0x00,0x68,0xB0,0x00,0x68,0xB0,0x00,0x00,    // 247
    0x00,0x30,0x48,0x48,0x30,0x00,0x00,0x00,    // 248
    0x00,0x30,0x78,0x78,0x30,0x00,0x00,0x00,    // 249
    0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,    // 250
    0x1C,0x10,0x10,0x90,0x50,0x30,0x10,0x00,    // 251
    0xE0,0x90,0x90,0x00,0x00,0x00,0x00,0x00,    // 252
    0x60,0x10,0x60,0xF0,0x00,0x00,0x00,0x00,    // 253
    0x00,0x70,0x70,0x70,0x70,0x70,0x70,0x00,    // 254
    0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55     // 255
};
